//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Settings/Game Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game Controls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""95c7721a-964e-4ca8-8fe8-e1b6547256a5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2b7a62c0-8dc2-462f-a1a7-f37ed1a05a04"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b9a1b378-00b6-480a-bfd9-c983d73f0c7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Running"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7c1c3260-85d1-44a9-8bf8-4d73c0663ff2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3e3b37fe-3654-4e52-a04a-df2417d862bb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0538ab2-4ca7-4fa0-9bd8-4fa31b4d8f82"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c5adce0-d4b2-44bb-ae9a-e0accf2b81d8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4cb1f5f2-d9c6-46ab-b182-144e9b2b19ba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""33cf7ad7-aafa-4eff-ab14-b8abcfe018cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0453779-9bf3-4dbe-9be5-5fff73c5047f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4894ded4-51d4-4e37-81b1-3dffe043c407"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""07edd443-9265-4f09-8f83-7f1528ac0ce5"",
            ""actions"": [
                {
                    ""name"": ""AxisX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""02621876-7216-4987-a22d-69697e7007a9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AxisY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5046f7bb-952b-48c1-8931-f841638f21c4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""060ed553-b02b-4477-9353-51091c66c736"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""AxisX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ba702c5-1926-493b-bdec-ec819b423efc"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AxisY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Actions"",
            ""id"": ""00fca251-3d66-49d7-88a1-1d1ee5729e5b"",
            ""actions"": [
                {
                    ""name"": ""Select Object"",
                    ""type"": ""Button"",
                    ""id"": ""17707988-b5b7-4202-9e6e-a4ce7c14bdcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Parent"",
                    ""type"": ""Button"",
                    ""id"": ""06e40ff6-956d-4fdf-9da1-858754eb245d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Increase Layer"",
                    ""type"": ""Button"",
                    ""id"": ""268c78cc-9a1b-4901-8ed1-47979f24ab29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decrease Layer"",
                    ""type"": ""Button"",
                    ""id"": ""baa6674f-e252-4428-b478-faa88c8b7268"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Blindfold"",
                    ""type"": ""Button"",
                    ""id"": ""12f09ac8-448d-4223-b92d-a9520222d6e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e8d4f905-6ce5-4724-9627-a9ca68292484"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""396782d2-54de-47bf-881f-6b9bda35ebb1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Parent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa449862-416e-4efc-8611-cb85ca694fc8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Increase Layer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca1f4adb-791c-4a8f-b06d-7cb8418c814e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decrease Layer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faa23975-0766-4844-9a55-7b88a09bb65a"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Blindfold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Running = m_Movement.FindAction("Running", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_AxisX = m_Camera.FindAction("AxisX", throwIfNotFound: true);
        m_Camera_AxisY = m_Camera.FindAction("AxisY", throwIfNotFound: true);
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_SelectObject = m_Actions.FindAction("Select Object", throwIfNotFound: true);
        m_Actions_SelectParent = m_Actions.FindAction("Select Parent", throwIfNotFound: true);
        m_Actions_IncreaseLayer = m_Actions.FindAction("Increase Layer", throwIfNotFound: true);
        m_Actions_DecreaseLayer = m_Actions.FindAction("Decrease Layer", throwIfNotFound: true);
        m_Actions_Blindfold = m_Actions.FindAction("Blindfold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Movement;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Running;
    public struct MovementActions
    {
        private @GameControls m_Wrapper;
        public MovementActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Running => m_Wrapper.m_Movement_Running;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Running.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRunning;
                @Running.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRunning;
                @Running.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRunning;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Running.started += instance.OnRunning;
                @Running.performed += instance.OnRunning;
                @Running.canceled += instance.OnRunning;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_AxisX;
    private readonly InputAction m_Camera_AxisY;
    public struct CameraActions
    {
        private @GameControls m_Wrapper;
        public CameraActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AxisX => m_Wrapper.m_Camera_AxisX;
        public InputAction @AxisY => m_Wrapper.m_Camera_AxisY;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @AxisX.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnAxisX;
                @AxisX.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnAxisX;
                @AxisX.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnAxisX;
                @AxisY.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnAxisY;
                @AxisY.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnAxisY;
                @AxisY.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnAxisY;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AxisX.started += instance.OnAxisX;
                @AxisX.performed += instance.OnAxisX;
                @AxisX.canceled += instance.OnAxisX;
                @AxisY.started += instance.OnAxisY;
                @AxisY.performed += instance.OnAxisY;
                @AxisY.canceled += instance.OnAxisY;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_SelectObject;
    private readonly InputAction m_Actions_SelectParent;
    private readonly InputAction m_Actions_IncreaseLayer;
    private readonly InputAction m_Actions_DecreaseLayer;
    private readonly InputAction m_Actions_Blindfold;
    public struct ActionsActions
    {
        private @GameControls m_Wrapper;
        public ActionsActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectObject => m_Wrapper.m_Actions_SelectObject;
        public InputAction @SelectParent => m_Wrapper.m_Actions_SelectParent;
        public InputAction @IncreaseLayer => m_Wrapper.m_Actions_IncreaseLayer;
        public InputAction @DecreaseLayer => m_Wrapper.m_Actions_DecreaseLayer;
        public InputAction @Blindfold => m_Wrapper.m_Actions_Blindfold;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @SelectObject.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSelectObject;
                @SelectObject.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSelectObject;
                @SelectObject.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSelectObject;
                @SelectParent.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSelectParent;
                @SelectParent.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSelectParent;
                @SelectParent.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSelectParent;
                @IncreaseLayer.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnIncreaseLayer;
                @IncreaseLayer.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnIncreaseLayer;
                @IncreaseLayer.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnIncreaseLayer;
                @DecreaseLayer.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnDecreaseLayer;
                @DecreaseLayer.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnDecreaseLayer;
                @DecreaseLayer.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnDecreaseLayer;
                @Blindfold.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnBlindfold;
                @Blindfold.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnBlindfold;
                @Blindfold.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnBlindfold;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SelectObject.started += instance.OnSelectObject;
                @SelectObject.performed += instance.OnSelectObject;
                @SelectObject.canceled += instance.OnSelectObject;
                @SelectParent.started += instance.OnSelectParent;
                @SelectParent.performed += instance.OnSelectParent;
                @SelectParent.canceled += instance.OnSelectParent;
                @IncreaseLayer.started += instance.OnIncreaseLayer;
                @IncreaseLayer.performed += instance.OnIncreaseLayer;
                @IncreaseLayer.canceled += instance.OnIncreaseLayer;
                @DecreaseLayer.started += instance.OnDecreaseLayer;
                @DecreaseLayer.performed += instance.OnDecreaseLayer;
                @DecreaseLayer.canceled += instance.OnDecreaseLayer;
                @Blindfold.started += instance.OnBlindfold;
                @Blindfold.performed += instance.OnBlindfold;
                @Blindfold.canceled += instance.OnBlindfold;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRunning(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnAxisX(InputAction.CallbackContext context);
        void OnAxisY(InputAction.CallbackContext context);
    }
    public interface IActionsActions
    {
        void OnSelectObject(InputAction.CallbackContext context);
        void OnSelectParent(InputAction.CallbackContext context);
        void OnIncreaseLayer(InputAction.CallbackContext context);
        void OnDecreaseLayer(InputAction.CallbackContext context);
        void OnBlindfold(InputAction.CallbackContext context);
    }
}
